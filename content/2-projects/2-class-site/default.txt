Title: Class Website

----

Project: 0

----

Text: 

To get started with HTML, CSS, and designing for the web, we'll create class websites that we'll use throughout the semester. To host these we'll use Github pages, a free service from Github that helps simplify moving code online, and makes it accessible via the world wid web. Github is a version control system that stores and manages a "repository" of code that can be downloaded, edited, and reuploaded to Github. This enables collaboration and code backups (which are helpful in case something gets lost or a bug gets introduced). 

Resources: [Sublime Text](https://www.sublimetext.com/), [Github](https://central.github.com/deployments/desktop/desktop/latest/darwin) (Mac) or [Github](https://central.github.com/deployments/desktop/desktop/latest/win32) (Windows)

### Text Editor

First, make sure you have a text editor downloaded. I will be demoing in Sublime Text, but feel free to use any of the ones below.

* [Sublime Text](https://www.sublimetext.com/)
* [Atom](https://atom.io/)
* [VS Code](https://code.visualstudio.com/)

### Setup Github

Next, we’ll set up our Github account, Github Desktop, and create a repository to host our files online.

GitHub is a web-based repository hosting service based on the Git version control and source code management system. GitHub allows individuals and teams of programmers to manage, share, store and make editable revisions to projects. We will be using Github’s code sharing and publishing service to store our class projects. 

See more on Github on [Github Guides](https://guides.github.com/).

1. Go to [github.com](https://github.com/) and create an account (make sure to verify your account).
2. Download and install [Github](https://central.github.com/deployments/desktop/desktop/latest/darwin) (Mac) or [Github](https://central.github.com/deployments/desktop/desktop/latest/win32) (Windows)
3. Sign into Github Desktop app on your computer with your new account.
4. Go back to [github.com](https://github.com/) and make sure you’re logged in with your account. Access our [Demos Repository](https://github.com/marieotsuka/interactive1-s21-demos) and click on the green *Code* button. Select “Open in Desktop” — this should launch your Github Desktop Program, where you will select where to “clone” this repository to. <p class="caption">Note: It’s a good idea to have a central folder in which you manage all of your Github Repositories. In this class, we will be using two. (This is not where you will store any design files – only your code. I’d suggest to put it in a separate place from your other class files.)</p>

By using Github Desktop to “Fetch” from the remote repository, you’ll always have access to the latest demo codes that are relevant to our lectures each week.

* To view these Demo files in the finder, Shift+Command+F or go to *Repository > Show in Finder* from the top Menu.

### Setup your own Repository

1.  Back on the Github site, from your Repositories page, click on the green button that says “New.”
2. Name your repository “interactive-foundations”. This repository will be the home for all of your web-based projects for Interactive 1 this Spring 2021 semester. 
3. Then initiate Github Pages, github’s webhosting feature, for the repository we just created.
4. On your “interactive-foundations” repository page click on the *Settings* tab and scroll down to the GitHub Pages section. 
5. Under *Source* select the *master* branch and click on the *Save.* button.
6. Click on the “Clone” button to the link this to your Github Desktop app.

* Everything is in place to create our first website, we just need to create an `index.html` file that will act as the "index" of our website. We’ll just use the files from our starter kit.


### Setup your site

1. Navigate to the *interactive1-s21-demos* folder on your computer.
Open the folder *week-1 > 00_class-site-starter-kit*.
2. Copy the contents of that folder into your own repository, *interactive-foundations* folder.
3. Go back to your Github application. You’ll see some empty input fields, one that says “Summary” and the other that says “Description”. 
    1. In the summary, summarize what you just did. You might say something like “initial commit” or “hello world”. 
    2. If you want to say more, type it in description, but this is optional.
    3. Then press the “Commit to main” button.
4. In the upper right hand corner of the application, press the “Publish” button. Github will ask you to log in if you aren’t already logged in. (Once you press the “Publish” button, it will change to “Fetch Origin".)

* If we’ve done everything correctly, our webpage should be accessible on the web. Navigate to *https://[username].github.io/interactive-foundations/* and it’s live! This will be your class homepage.

From now on, whenever you want to update your page, first do it to your local version. Your local version is saved on your personal computer. Then, when you want to push it “live” (to the online version), open up your Github application. Make sure that the "main/master" branch is selected from the dropdown (this is very important!) and press “Commit”. Then press “Sync” in the upper right hand corner.


***

**Local vs. Online**

You will become familiar with having two versions of your site: 

*Local*
This version is located on your personal computer, and therefore only you can view this version. When you open it in a web browser, you will see that the address bar starts with “file:// …”  


*Online*
This version is located on the internet, and therefore anyone online can view this version. When you open it in a web browser, you will see that the address bar starts with “http:// …”

When working on a project, you will create things first on your local version. This allows you to properly experiment and test them before “deploying” onto your online version.


***

Spend some time updating your class site to personalize it. HTML uses its own syntax, and you’ll be most effective by updating the text between "tags" (the code between two sets of pointy brackets `<div>edit here</div>` within the `<body></body>` tags. However, don’t let that deter you from experimentation (you may end up breaking your site, but it can be easily fixed!). We'll be learning about the meaning of each tag shortly, but in the short term try using the `<pre>` tag to experiment with ASCII art.

```
<pre>
 /\_/\
( o.o )
 > ^ <
</pre>
``